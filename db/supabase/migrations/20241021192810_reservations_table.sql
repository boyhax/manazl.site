
create table IF NOT EXISTS
  public.reservations (
    id bigint generated by default as identity,
    title text null,
    created_at timestamp with time zone not null default now(),
    variant_id bigint null,
    user_id uuid null default uid (),
    updated_at timestamp without time zone null,
    total_pay real null,
    approved boolean not null default false,
    short_id character varying null,
    state public.reservation_states not null default 'pending'::reservation_states,
    end_date timestamp without time zone not null,
    payment_id character varying null,
    start_date timestamp without time zone not null,
    listing_id bigint not null,
    reservation_period tstzrange null,
    constraint bookings_pkey primary key (id),
    constraint bookings_user_id_fkey foreign key (user_id) references profiles (id),
    constraint reservations_listing_id_fkey foreign key (listing_id) references listings (id) on update cascade on delete cascade,
    constraint reservations_variant_id_fkey foreign key (variant_id) references variants (id) on update cascade on delete set null,
    constraint exclude_overlapping exclude using gist (
      variant_id
      with
        =,
        reservation_period
      with
        &&
    )
  ) tablespace pg_default;

create trigger set_reservation_period_trigger before insert
or
update on reservations for each row
execute function set_reservation_period ();

ALTER TABLE public.reservations
ALTER COLUMN variant_id SET NOT NULL;

