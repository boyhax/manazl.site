

create extension if not exists "postgis" with schema "public" version '3.3.2';

drop policy "Enable read access for all users" on "public"."settings";

revoke delete on table "public"."settings" from "anon";

revoke insert on table "public"."settings" from "anon";

revoke references on table "public"."settings" from "anon";

revoke select on table "public"."settings" from "anon";

revoke trigger on table "public"."settings" from "anon";

revoke truncate on table "public"."settings" from "anon";

revoke update on table "public"."settings" from "anon";

revoke delete on table "public"."settings" from "authenticated";

revoke insert on table "public"."settings" from "authenticated";

revoke references on table "public"."settings" from "authenticated";

revoke select on table "public"."settings" from "authenticated";

revoke trigger on table "public"."settings" from "authenticated";

revoke truncate on table "public"."settings" from "authenticated";

revoke update on table "public"."settings" from "authenticated";

revoke delete on table "public"."settings" from "service_role";

revoke insert on table "public"."settings" from "service_role";

revoke references on table "public"."settings" from "service_role";

revoke select on table "public"."settings" from "service_role";

revoke trigger on table "public"."settings" from "service_role";

revoke truncate on table "public"."settings" from "service_role";

revoke update on table "public"."settings" from "service_role";

drop view if exists "public"."chat_overview";

alter table "public"."categories" drop constraint "catagories_pkey";

alter table "public"."settings" drop constraint "settings_pkey";

alter table "public"."metas" drop constraint "metas_pkey";

drop index if exists "public"."settings_pkey";

drop index if exists "public"."catagories_pkey";

drop index if exists "public"."metas_pkey";

drop table "public"."settings";





create table "public"."listings_reports" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "text" text,
    "user_id" uuid default auth.uid(),
    "listing_id" bigint,
    "reason" text
);


alter table "public"."listings_reports" enable row level security;

create table "public"."meta_types" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "value" json
);


alter table "public"."meta_types" enable row level security;

create table "public"."post_reports" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "text" text,
    "user_id" uuid default auth.uid(),
    "post_id" bigint
);


alter table "public"."post_reports" enable row level security;

create table "public"."posts_ratings" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "rating" boolean
);


alter table "public"."posts_ratings" enable row level security;

create table "public"."terms" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text,
    "image" text,
    "parent" bigint,
    "description" text,
    "meta_type" bigint,
    "type" text,
    "category" text
);


alter table "public"."terms" enable row level security;

alter table "public"."bookings" add column "listing_id" bigint;

alter table "public"."bookings" add column "title" text;

alter table "public"."categories" drop column "parent_catagory";

alter table "public"."categories" add column "parent" bigint;

alter table "public"."categories" add column "slug" text;

alter table "public"."listings" add column "categories" text[] default '{}'::text[];

alter table "public"."listings" add column "distance" real;

alter table "public"."metas" drop column "key";

alter table "public"."metas" add column "name" character varying not null;

alter table "public"."metas" alter column "value" set data type text using "value"::text;


CREATE UNIQUE INDEX categorizes_pkey ON public.categories USING btree (id);

CREATE UNIQUE INDEX categorizes_slug_key ON public.categories USING btree (slug);

CREATE UNIQUE INDEX listings_reports_pkey ON public.listings_reports USING btree (id);

CREATE UNIQUE INDEX meta_types_pkey ON public.meta_types USING btree (id);

CREATE UNIQUE INDEX metas_key_key ON public.metas USING btree (name);

CREATE UNIQUE INDEX post_reports_pkey ON public.post_reports USING btree (id);

CREATE UNIQUE INDEX posts_ratings_pkey ON public.posts_ratings USING btree (id);

CREATE UNIQUE INDEX catagories_pkey ON public.terms USING btree (id);

CREATE UNIQUE INDEX metas_pkey ON public.metas USING btree (id);


alter table "public"."categories" add constraint "categorizes_pkey" PRIMARY KEY using index "categorizes_pkey";

alter table "public"."listings_reports" add constraint "listings_reports_pkey" PRIMARY KEY using index "listings_reports_pkey";

alter table "public"."meta_types" add constraint "meta_types_pkey" PRIMARY KEY using index "meta_types_pkey";

alter table "public"."post_reports" add constraint "post_reports_pkey" PRIMARY KEY using index "post_reports_pkey";

alter table "public"."posts_ratings" add constraint "posts_ratings_pkey" PRIMARY KEY using index "posts_ratings_pkey";

alter table "public"."terms" add constraint "catagories_pkey" PRIMARY KEY using index "catagories_pkey";

alter table "public"."metas" add constraint "metas_pkey" PRIMARY KEY using index "metas_pkey";

alter table "public"."bookings" add constraint "bookings_listing_id_fkey" FOREIGN KEY (listing_id) REFERENCES listings(id) not valid;

alter table "public"."bookings" validate constraint "bookings_listing_id_fkey";

alter table "public"."categories" add constraint "categorizes_parent_fkey" FOREIGN KEY (parent) REFERENCES terms(id) not valid;

alter table "public"."categories" validate constraint "categorizes_parent_fkey";

alter table "public"."categories" add constraint "categorizes_slug_key" UNIQUE using index "categorizes_slug_key";

alter table "public"."listings_reports" add constraint "listings_reports_listing_id_fkey" FOREIGN KEY (listing_id) REFERENCES listings(id) ON DELETE CASCADE not valid;

alter table "public"."listings_reports" validate constraint "listings_reports_listing_id_fkey";

alter table "public"."listings_reports" add constraint "listings_reports_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."listings_reports" validate constraint "listings_reports_user_id_fkey";

alter table "public"."metas" add constraint "metas_key_key" UNIQUE using index "metas_key_key";

alter table "public"."post_reports" add constraint "post_reports_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."post_reports" validate constraint "post_reports_post_id_fkey";

alter table "public"."post_reports" add constraint "post_reports_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) not valid;

alter table "public"."post_reports" validate constraint "post_reports_user_id_fkey";

alter table "public"."posts_ratings" add constraint "posts_ratings_user_id_fkey" FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE not valid;

alter table "public"."posts_ratings" validate constraint "posts_ratings_user_id_fkey";

alter table "public"."terms" add constraint "categories_meta_type_fkey" FOREIGN KEY (meta_type) REFERENCES meta_types(id) not valid;

alter table "public"."terms" validate constraint "categories_meta_type_fkey";

alter table "public"."terms" add constraint "categories_parent_fkey" FOREIGN KEY (parent) REFERENCES terms(id) not valid;

alter table "public"."terms" validate constraint "categories_parent_fkey";

set check_function_bodies = off;

create type "public"."geometry_dump" as ("path" integer[], "geom" geometry);

create type "public"."valid_detail" as ("valid" boolean, "reason" character varying, "location" geometry);

CREATE OR REPLACE FUNCTION public.get_listing_owner(listing_id bigint)
 RETURNS uuid
 LANGUAGE plpgsql
AS $function$ begin return (
    select
        l.user_id
    from
        listings l
    where
        l.id = listing_id
);

end;

$function$
;

CREATE OR REPLACE FUNCTION public.get_owner(variant_id integer)
 RETURNS uuid
 LANGUAGE plpgsql
AS $function$ begin return (
    select
        l.user_id
    from
        bookings b
        join variants v on v.id = b.variant_id
        join listings l on l.id = v.listing_id
);

end;

$function$
;

CREATE OR REPLACE FUNCTION public.get_variant_owner(variant_id bigint)
 RETURNS uuid
 LANGUAGE plpgsql
AS $function$ begin return (
    select
        l.user_id
    from
        variants v
        join listings l on l.id = v.listing_id
    where
        v.id = variant_id
);

end;

$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_listing()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$ begin
insert into
    public.states (id)
values
    (new.id);

return new;

end;

$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_rating()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ BEGIN
UPDATE
    listings
SET
    rating = (
        SELECT
            AVG(rating)
        FROM
            reviews
        WHERE
            listing_id = NEW.listing_id
    )
WHERE
    listings.id = NEW.listing_id;

RETURN NEW;

END;

$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$ begin
insert into
    public.profiles (id, full_name, avatar_url, email)
values
    (
        new.id,
        new.raw_user_meta_data ->> 'full_name',
        new.raw_user_meta_data ->> 'avatar_url',
        new.email
    );

return new;

end;

$function$
;

CREATE OR REPLACE FUNCTION public.listings_in_view(min_lat double precision, min_lng double precision, max_lat double precision, max_lng double precision)
 RETURNS SETOF listings
 LANGUAGE plpgsql
AS $function$BEGIN RETURN query
SELECT
    *
FROM
    listings
where
    geo_location::geometry  && ST_MakeBox2D(
        ST_Point(min_lng, min_lat),
        ST_Point(max_lng, max_lat)
    );

END;$function$
;

CREATE OR REPLACE FUNCTION public.nearby_listings(lat double precision, long double precision, radius double precision)
 RETURNS SETOF listings
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
    RETURN QUERY
    SELECT *
    FROM listings
    WHERE ST_DWithin(geo_location, ST_MakePoint(long, lat), radius)
    ORDER BY ST_Distance(geo_location, st_point(long,lat));
END;
$function$
;

CREATE OR REPLACE FUNCTION public.sort_uuid_array(uuid[])
 RETURNS uuid[]
 LANGUAGE sql
 IMMUTABLE
AS $function$
SELECT array_agg(val ORDER BY val)
FROM unnest($1) AS val;
$function$
;

CREATE OR REPLACE FUNCTION public.title_description(listings)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$
SELECT
    $ 1.title || ' ' || $ 1.description;

$function$
;

CREATE OR REPLACE FUNCTION public.update_fts()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$ BEGIN NEW.fts := NEW.description || ' ' || NEW.title || ' ' || COALESCE(array_to_string(NEW.tags, ' '), '');

RETURN NEW;

END;

$function$
;

CREATE OR REPLACE FUNCTION public.update_geo_location()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN NEW.geo_location := ST_Point(NEW.place_point [2], NEW.place_point [1]) :: geography;

RETURN NEW;
END;$function$
;
CREATE OR REPLACE FUNCTION public.update_likes_count()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$ BEGIN IF (TG_OP = 'INSERT') THEN
UPDATE
    listings
SET
    likes = likes + 1
WHERE
    id = NEW.listing_id;

ELSIF (TG_OP = 'DELETE') THEN
UPDATE
    listings
SET
    likes = likes - 1
WHERE
    id = OLD.listing_id;
END IF;
RETURN NULL;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_updated_at()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ BEGIN NEW.updated_at = NOW();
RETURN NEW;
END;
$function$;


create policy "Enable read access for all users"
on "public"."bookings"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));




create policy "Enable read access for all users"
on "public"."categories"
as permissive
for select
to public
using (true);


create policy "Enable delete for users based on user_id"
on "public"."listings_reports"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."listings_reports"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."listings_reports"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on user_id"
on "public"."listings_reports"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."meta_types"
as permissive
for select
to public
using (true);


create policy "Enable insert for users based on user_id"
on "public"."post_reports"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."post_reports"
as permissive
for select
to public
using (true);


create policy "posts-all-policy"
on "public"."posts"
as permissive
for all
to authenticated
using ((user_id = ( SELECT auth.uid() AS uid)))
with check ((user_id = ( SELECT auth.uid() AS uid)));


create policy "Enable read access for all users"
on "public"."terms"
as permissive
for select
to public
using (true);



